{"version":3,"sources":["image-color-picker/Canvas.js","image-color-picker/Color.js","image-color-picker/ImageColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","React","memo","img","imgUrl","sizeX","sizeY","roundness","getCtx","canvasrRef","useRef","useLayoutEffect","ctx","current","getContext","imgSize","x","y","finalWidth","finalHeight","imgRatio","Math","round","calcImgSize","width","height","drawImage","Image","onload","src","ref","style","borderRadius","Color","color","pos","mouseDown","onColorPickedText","showRGB","zindex","translate","pstyle","left","top","zIndex","transform","ccstyle","background","display","id","className","ImageColorPicker","props","setState","getColor","imgData","state","getImageData","data","onMouseDown","e","nativeEvent","offsetX","offsetY","onMouseUp","onColorPicked","onMouseMove","onColorPicking","onFileChange","fileInp","files","URL","createObjectURL","pickerMaxSize","undefined","createRef","borderColor","this","cursor","type","onChange","selectImgButton","Component","App","changeTitle","document","title","changeColor","textShadow","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3245365a.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\r\n\r\nconst Canvas = React.memo(({ img, imgUrl, sizeX, sizeY, roundness, getCtx }) => {\r\n  const canvasrRef = useRef();\r\n\r\n  useLayoutEffect(() => {    \r\n    const ctx = canvasrRef.current.getContext(\"2d\");    \r\n    const calcImgSize = (x,y) => {\r\n      let imgRatio = x / y;\r\n      let setRatio = sizeX / sizeY;      \r\n      let finalWidth, finalHeight;\r\n      if (imgRatio > setRatio) {\r\n        finalWidth = sizeX;\r\n        finalHeight = Math.round( sizeX / imgRatio );\r\n      } else {\r\n        finalWidth = Math.round( sizeY * imgRatio );\r\n        finalHeight = sizeY;\r\n      }\r\n      return [ finalWidth, finalHeight]\r\n    }\r\n    \r\n    if (img) {\r\n      let imgSize = calcImgSize(img.width, img.height);\r\n      canvasrRef.current.width = imgSize[0];\r\n      canvasrRef.current.height = imgSize[1];\r\n      ctx.drawImage(img, 0, 0, imgSize[0], imgSize[1]);\r\n    } else {\r\n      const ctx = canvasrRef.current.getContext(\"2d\");\r\n      const img = new Image();       \r\n      img.onload = () => {\r\n        ctx.drawImage(img, 0, 0);\r\n      }\r\n      img.src = imgUrl;\r\n    } \r\n    getCtx(ctx);\r\n  },[img, imgUrl, getCtx, sizeY, sizeX ]);\r\n    \r\n    return (\r\n      <canvas ref={canvasrRef} style={{borderRadius:roundness-13}} width={ sizeX } height={ sizeY } />\r\n    );\r\n})\r\n\r\nexport default Canvas;\r\n","import React from 'react';\r\nimport './Color.css';\r\n\r\nconst Color = ({ color, pos, mouseDown, onColorPickedText, showRGB, width }) => {    \r\n    let zindex = (mouseDown===false) ? 3 : 1;\r\n    let translate =  ( pos[0] > width-133 ) ? 'translate(calc(-100% - 18px), 0px)' : 'none';\r\n    const pstyle = { left:pos[0]+8, top:pos[1]+8, zIndex:zindex, transform: translate };\r\n    const ccstyle = { left: pos[0]-9, top: pos[1]-9, background: color };\r\n    let display = showRGB ? 'show' : 'hide';\r\n    \r\n    if (mouseDown) {\r\n        return (\r\n            <div >\r\n            <div id='pointer' style={ccstyle}></div>    \r\n            <p className={display}  id='showinfo' style={pstyle}>{color}</p>\r\n            </div>\r\n            );\r\n    } else if (mouseDown === false) {\r\n        return (\r\n            <div>\r\n            <div id='pointer' style={ccstyle}></div>\r\n            <p id='showinfo' style={pstyle} ><span className={display}>{color}</span> {onColorPickedText} </p>\r\n            </div>);\r\n    } else {\r\n        return (\r\n            <div>\r\n            <div id='pointer' style={ccstyle}></div>\r\n            <p id='showinfo' style={pstyle} >Select the color</p>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Color;\r\n","// Image color Picker created by Roman FlÃ¶ssler - https://github.com/Roman-Flossler\r\n\r\nimport React, { Component } from 'react';\r\nimport Canvas from './Canvas';\r\nimport Color from './Color';\r\nimport './ImageColorPicker.css';\r\n\r\nclass ImageColorPicker extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      color: '',\r\n      pos: [props.pickerMaxSize[0]/3-20, props.pickerMaxSize[1]/2-20],\r\n      ctx: null,\r\n      mouseDown: undefined,\r\n      img: undefined\r\n    }\r\n    this.fileInp = React.createRef();\r\n  }\r\n\r\n  getCtx = (ctx) => {\r\n    this.setState({ ctx: ctx });    \r\n  }\r\n\r\n  getColor = (x,y) => {\r\n    const imgData = this.state.ctx.getImageData(x, y, 1, 1);\r\n    return 'rgb(' + imgData.data[0] + ', ' + imgData.data[1] + ', ' + imgData.data[2] + ')';\r\n  }\r\n\r\n  onMouseDown = (e) => {\r\n    this.setState({  \r\n      pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\r\n      mouseDown: true,\r\n      color: this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY)\r\n    });    \r\n  }\r\n\r\n  onMouseUp = () => {\r\n    this.setState({ mouseDown: false });\r\n    this.props.onColorPicked && this.props.onColorPicked(this.state.color);\r\n  }\r\n\r\n  onMouseMove = (e) => {    \r\n    if (this.state.mouseDown) {\r\n      this.setState({  \r\n        pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\r\n        color: this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY)\r\n      });\r\n      this.props.onColorPicking && this.props.onColorPicking(this.state.color);\r\n    }     \r\n  }\r\n\r\n  onFileChange = () => {\r\n    let img = new Image();\r\n    img.onload = () => {\r\n      this.setState( {img: img} )    \r\n    }\r\n    if (this.fileInp.current.files[0]) {\r\n      img.src = URL.createObjectURL(this.fileInp.current.files[0]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div style={{ borderColor: this.state.color, borderRadius: this.props.roundness }} id='frame' >\r\n        <Canvas img={this.state.img} imgUrl={this.props.imgUrl} sizeX={this.props.pickerMaxSize[0]} sizeY={this.props.pickerMaxSize[1]} \r\n                roundness={this.props.roundness} getCtx={this.getCtx} ></Canvas>\r\n        \r\n        <Color color={this.state.color} pos={this.state.pos} mouseDown={this.state.mouseDown} \r\n        onColorPickedText={this.props.onColorPickedText} showRGB={this.props.showRGB} width={this.props.pickerMaxSize[0]} ></Color>\r\n        \r\n        <div id='mousecatcher' onMouseMove={ this.onMouseMove } onMouseDown={this.onMouseDown}  onMouseUp={ this.onMouseUp }\r\n        style={ { borderRadius: this.props.roundness-13, cursor: this.state.mouseDown ? 'none' : 'default'  }} ></div>\r\n      </div>\r\n      <input ref={this.fileInp} type=\"file\" onChange={this.onFileChange} style={this.props.selectImgButton ? { display:'block' } : { display:'none' } }></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageColorPicker;\r\n","import React, { Component } from 'react';\nimport ImageColorPicker from './image-color-picker/ImageColorPicker';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      color: '',\n    }\n  }\n\n\nchangeTitle = (color) => {\n  document.title = ' ð¨ ' + color;\n}\n\nchangeColor = (color) => {\n  this.setState( {color: color} );  \n}\n\n\n  render() {\n    return (\n        <div className=\"App\">\n        <h1 style={{color: this.state.color,  textShadow: '0 0 11px' + this.state.color }} >image Color Picker</h1>\n          <header className=\"App-header\">            \n            <ImageColorPicker imgUrl={'rgb.png'} pickerMaxSize={[300,300]} roundness={200} showRGB={true}\n                              onColorPicked={this.changeTitle} onColorPickedText={'is the new page title'}  >\n            </ImageColorPicker>\n            <ImageColorPicker selectImgButton={true} imgUrl={'palette.png'} pickerMaxSize={[555,300]} onColorPicking={this.changeColor} \n                              onColorPicked={this.changeColor} roundness={16} >\n            </ImageColorPicker>\n          </header>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// The react-dom package provides DOM-specific methods that can be used at the top level of your app \n// and as an escape hatch to get outside of the React model if you need to.\n// Most of your components should not need to use this module.\n// Render a React element into the DOM in the supplied container\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
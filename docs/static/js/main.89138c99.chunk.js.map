{"version":3,"sources":["image-color-picker/Canvas.js","image-color-picker/Color.js","image-color-picker/ImageColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","canvas","this","refs","ctx","getContext","img","Image","src","props","imgUrl","onload","drawImage","getCtx","nextProps","nextState","imgSize","console","log","ref","style","borderRadius","roundness","width","height","React","Component","Color","color","pos","mouseDown","onColorPickedText","showRGB","zindex","translate","pstyle","left","top","zIndex","transform","ccstyle","background","display","id","className","ImageColorPicker","setState","getColor","x","y","imgData","state","getImageData","data","onMouseDown","e","nativeEvent","offsetX","offsetY","onMouseUp","onColorPicked","onMouseMove","onColorPicking","undefined","borderColor","cursor","App","changeTitle","document","title","changeColor","textShadow","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89138c99.chunk.js","sourcesContent":["import React from 'react';\n\nclass Canvas extends React.Component {\n  componentDidMount() {   //componentDidMount will run after the render, so the canvas already exists  \n    // refs are used to get reference to a DOM. this address actual object\n    const canvas = this.refs.canvas\n    this.ctx = canvas.getContext(\"2d\")\n    const img = new Image();\n    img.src = this.props.imgUrl;\n    img.onload = () => {\n      this.ctx.drawImage(img, 0, 0);\n    } \n    this.props.getCtx(this.ctx);\n  }\n  \n  // render is called only when the canvas image will change (url, size). \n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.imgUrl !== nextProps.imgUrl || this.props.imgSize[0] !== nextProps.imgSize[0] || this.props.imgSize[1] !== nextProps.imgSize[1] ) {\n      this.props.getCtx(this.ctx);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    console.log('canvasing')\n    return (\n      <canvas ref=\"canvas\" style={{borderRadius:this.props.roundness-13}} \n      width={this.props.imgSize[0]} height={this.props.imgSize[1]} />\n    );\n  }\n}\n\nexport default Canvas;\n","import React from 'react';\r\nimport './Color.css';\r\n\r\nconst Color = ({ color, pos, mouseDown, onColorPickedText, showRGB, width }) => {    \r\n    let zindex = (mouseDown===false) ? 3 : 1;\r\n    let translate =  ( pos[0] > width-133 ) ? 'translate(calc(-100% - 18px), 0px)' : 'none';\r\n    const pstyle = { left:pos[0]+8, top:pos[1]+8, zIndex:zindex, transform: translate };\r\n    const ccstyle = { left: pos[0]-9, top: pos[1]-9, background: color };\r\n    let display = showRGB ? 'show' : 'hide';\r\n    \r\n    if (mouseDown) {\r\n        return (\r\n            <div >\r\n            <div id='pointer' style={ccstyle}></div>    \r\n            <p className={display}  id='showinfo' style={pstyle}>{color}</p>\r\n            </div>\r\n            );\r\n    } else if (mouseDown === false) {\r\n        return (\r\n            <div>\r\n            <div id='pointer' style={ccstyle}></div>\r\n            <p id='showinfo' style={pstyle} ><span className={display}>{color}</span> {onColorPickedText} </p>\r\n            </div>);\r\n    } else {\r\n        return (\r\n            <div>\r\n            <div id='pointer' style={ccstyle}></div>\r\n            <p id='showinfo' style={pstyle} >Select the color</p>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Color;\r\n","// Image color Picker created by Roman FlÃ¶ssler - https://github.com/Roman-Flossler\n\nimport React, { Component } from 'react';\nimport Canvas from './Canvas';\nimport Color from './Color';\nimport './ImageColorPicker.css';\n\nclass ImageColorPicker extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      color: '',\n      pos: [props.imgSize[0]/3-20, props.imgSize[1]/2-20],\n      ctx: null,\n      mouseDown: undefined\n    }\n  }\n\n  getCtx = (ctx) => {\n    this.setState({ ctx: ctx });    \n  }\n\n  getColor = (x,y) => {\n    const imgData = this.state.ctx.getImageData(x, y, 1, 1);\n    return 'rgb(' + imgData.data[0] + ', ' + imgData.data[1] + ', ' + imgData.data[2] + ')';\n  }\n\n  onMouseDown = (e) => {\n    this.setState({  \n      pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\n      mouseDown: true,\n      color: this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY)\n    });    \n  }\n\n  onMouseUp = () => {\n    this.setState({ mouseDown: false });\n    this.props.onColorPicked && this.props.onColorPicked(this.state.color);\n  }\n\n  onMouseMove = (e) => {    \n    if (this.state.mouseDown) {\n      this.setState({  \n        pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\n        color: this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY)\n      });\n      this.props.onColorPicking && this.props.onColorPicking(this.state.color);\n    }     \n  }\n\n  render() {\n    return (\n      <div style={{ borderColor: this.state.color, borderRadius: this.props.roundness }} id='frame' >\n        <Canvas imgUrl={this.props.imgUrl} imgSize={this.props.imgSize} roundness={this.props.roundness} pos={this.state.pos} getCtx={this.getCtx} ></Canvas>\n        \n        <Color color={this.state.color} pos={this.state.pos} mouseDown={this.state.mouseDown} \n        onColorPickedText={this.props.onColorPickedText} showRGB={this.props.showRGB} width={this.props.imgSize[0]} ></Color>\n        \n        <div id='mousecatcher' onMouseMove={ this.onMouseMove } onMouseDown={this.onMouseDown}  onMouseUp={ this.onMouseUp }\n        style={ { borderRadius: this.props.roundness-13, cursor: this.state.mouseDown ? 'none' : 'default'  }} ></div>\n      </div>\n    );\n  }\n}\n\nexport default ImageColorPicker;\n","import React, { Component } from 'react';\nimport ImageColorPicker from './image-color-picker/ImageColorPicker';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      color: '',\n    }\n  }\n\n\nchangeTitle = (color) => {\n  document.title = ' ðŸŽ¨ ' + color;\n}\n\nchangeColor = (color) => {\n  this.setState( {color: color} );  \n}\n\n\n  render() {\n    return (\n        <div className=\"App\">\n        <h1 style={{color: this.state.color,  textShadow: '0 0 11px' + this.state.color }} >image Color Picker</h1>\n          <header className=\"App-header\">            \n            <ImageColorPicker imgUrl={'rgb.png'} imgSize={[300,300]} roundness={200} showRGB={true}\n            onColorPicked={this.changeTitle} onColorPickedText={'is the new page title'}  >\n            </ImageColorPicker>\n            <ImageColorPicker imgUrl={'palette.png'} imgSize={[555,300]} onColorPicking={this.changeColor} onColorPicked={this.changeColor} roundness={16} >\n            </ImageColorPicker>\n          </header>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// The react-dom package provides DOM-specific methods that can be used at the top level of your app \n// and as an escape hatch to get outside of the React model if you need to.\n// Most of your components should not need to use this module.\n// Render a React element into the DOM in the supplied container\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}